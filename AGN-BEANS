#%%
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 22 13:15:47 2025

@author: karina

Current python version: 3.12.4
"""

import rebound
import numpy as np
import matplotlib.pyplot as plt
import os
import pandas as pd
import glob
from PIL import Image
from scipy import stats
from scipy.ndimage import gaussian_filter
from astropy.convolution import Gaussian1DKernel, convolve
import sys


# User Set Parameters --------------------------------------------------------------
'''Code units are in cgs'''


BHM = 5e8                     # Black hole mass in solar masses
KVZ = 3000e5                  # Kick velocity cm / s
KVX = 0
KVY = 0
RS = None                      # Set seed for repeatability
N_testparticle = 1000          # Number of test particles
Nimg = 1501                    # Number of frames 
timesteps = [0, 100, 500, 1000, 1500]    # What timestep to print as profiles
ObsInc = [0]                   # Inclination of observer to generate profiles using


Y = 20                         # Size scaled to BLR
Tsub = 1500                    # Dust sublimation temperature
Eratio = 0.1                   # Eddington ratio
sigma = 1                      # Angular width
p = 0                          # Cloud distribution power law - 0 for uniform distribution
c =  2.998e10                  # Speed of light in cm/s
s =  0                         # Gas density distribution 0 - constant density -2 - 1/r^2 dropoff
n0 = 10**7                     # Value of gas density at outer radius


# Calculated parameters--------------------------------------------------------

BHMg = BHM * 1.989e+33              # Solar mass to g
SwR = ((2*BHMg*(6.67e-8))/(c**2))   # Schwarzschild Radius (cm)
LEdd = 1.26e38*(BHMg/1.989e33)      # Eddington Luminosity
LAGN = Eratio*LEdd                  # Bolometric luminosity erg s**-1  Sum of all clouds should be around 10**40
Rd = (0.4*((((LAGN)/(10**45))**0.5)*((1500/Tsub)**2.6)))* 3.086e+18 # Dust sublimation radius
qagnratio = 2.6e55/10e45            # Base ratio of ionizing photon luminosity to AGN luminosity
Q = qagnratio*LAGN                  # Ionizing photon luminosity photons/s
alpha = (p-2)-2*(s/3)
incval = 0.35                       # Disk inclination
Cf = 0.3/np.sin(incval)             # Covering fraction for flared disk


if alpha == -1:
    print("Value for alpha cannot be equal to -1. Check parameters")
    sys.exit(1)

# Constants--------------------------------------------------------------------

alphaeff = 1.1e-13              # Effective recombination coefficient for Halpha cm^3*s^-1
alphaB = 2.6e-13                # Recombination coefficient for hydrogen cm^3*s^-1
h = 6.62607015e-27 
EffRecomb = 1.1e13              # cm^3 s^âˆ’1
nu = (c)/(656e-7)


plt.ioff() #Tells IDE to only save the plots and not display them for speed

# Removes previous files so the data is replaced. Needed when directly changing simulation parameters

def delete_files_in_directory(directory_path):
   try:
     files = glob.glob(os.path.join(directory_path, '*'))
     for file in files:
       if os.path.isfile(file):
         os.remove(file)
     print("All files deleted successfully.")
   except OSError:
     print("Error occurred while deleting files.")

directory_path1 = '/Users/karina/Desktop/Python/Capstone/TestingEnvironment/AnimationFolder'
directory_path2 = '/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData'
directory_path3 = '/Users/karina/Desktop/Python/Capstone/TestingEnvironment/TimestepData'

delete_files_in_directory(directory_path1)
delete_files_in_directory(directory_path2)
delete_files_in_directory(directory_path3)


# Simulation ------------------------------------------------------------------

"""Set up the particles in the simulation. Particles are added by default in
Jacobi coordinates (center-of-mass frame)"""

sim = rebound.Simulation()    # Initialize the simulation
sim.units = ('s', 'cm', 'g')  # Set simulation units
sim.ri_ias15.min_dt = 10000   # Set minimum timestep length in seconds
sim.add(m = BHMg)             # Add the central particle
primary=sim.particles[0]
np.random.seed(42)            # Random seed for test cases


# Set up initial distribution of test particles --------------------------------

a_initial = np.linspace(Rd/Y, Rd, N_testparticle) # Initial range of semi major axis to distribute particles
'''Range determined by the dust sublimation radius and the size scaled to BLR'''

for a in a_initial:
    sim.add(a=a,
            inc = np.random.uniform(low = -incval, high = incval),    # Inclination
            Omega = np.random.uniform(high = np.pi),                  # Longitude of ascending node
            f=np.random.rand()*2.*np.pi)          # Mass is set to 0 by default, random true anomaly


# Print parameters for easy copy-pasting---------------------------------------

print('Recoil z velocity in cm/s: ' + str(KVZ))
print('Recoil x velocity in cm/s: ' + str(KVX))
print('Recoil y velocity in cm/s: ' + str(KVY))
print('BH Mass: ' + str(BHM))
print('Number of test Particles: ' + str(N_testparticle))
print('Random seed: ' + str(RS))
print('Number of frames to generate: ' + str(Nimg))
print('Inner Radius: '+ str(Rd/Y))
print('Outer Radius: '+ str(Rd))
print('Schwarzschild Radius: '+ str(SwR))
print('AGN Luminosity: '+ str(LAGN))
print('Ionizing Photon Luminosity: '+str(Q))
print('Eddington Ratio: '+str(Eratio))
print('Dust Sublimation Temperature: '+str(Tsub))

#%% Integration -----------------------------------------------------------------

for i in range(Nimg):
    if i == 0:
        # Print the base simulation before any modification

        coords = np.zeros((sim.N, 6))
        sim.serialize_particle_data(xyzvxvyvz=coords)
        fig, ([ax1, ax2], [ax3, ax4]) = plt.subplots(2,2, figsize = (12,10), dpi = 200)

        # XY graph
        ax1 = plt.subplot(2,2,3)
        vz = coords[:,5] 
        scatterxy = plt.scatter(coords[:,0], coords[:,1], c = vz, cmap = 'coolwarm_r', s = 2.5)
        plt.colorbar(scatterxy, label = 'Z-Velocity')
        plt.scatter(coords[:,0][0], coords[:,1][0], marker = 'x', c = 'k', s = 50)
        ax1.set_title("XY")
        ax1.set_xlabel('Distance in cm')

        # YZ graph
        ax2 = plt.subplot(2,2,4)
        vx = coords[:,3]
        scatteryz = plt.scatter(coords[:,2], coords[:,1], c = vx, cmap = 'coolwarm', s = 2.5)
        plt.colorbar(scatteryz, label = 'X-Velocity')
        plt.scatter(coords[:,2][0], coords[:,1][0], marker = '*', c = 'm', s = 75)

        plt.yticks(color='w')
        ax2.set_title("YZ")
        ax2.set_xlabel('Distance in cm')

        # XZ graph
        ax3 = plt.subplot(2,2,1)
        vy = coords[:,4]
        scatterxz = plt.scatter(coords[:,0], coords[:,2], c = vy, cmap = 'coolwarm', s = 2.5)
        plt.colorbar(scatterxz, label = 'Y-Velocity')
        plt.scatter(coords[:,0][0], coords[:,2][0], marker = '*', c = 'm', s = 75)

        plt.xticks(color='w')
        ax3.set_title("XZ")
        ax3.set_ylabel('Distance in cm')

        # Empty space
        ax4 = plt.subplot(2,2,2)
        plt.scatter(0,0, alpha = 0)
        plt.axis('off')
        plt.tick_params(left = False, right = False , labelleft = False , labelbottom = False, bottom = False)
        ax4.set_title("SMBH Recoil\nInitial Z velocity (cm/s): " + str(KVZ)+"\nInitial X velocity (cm/s): "+ str(KVX)+"\nInitial Y velocity (cm/s): "+ str(KVY)+'\nTimestep: '+ str(sim.t)+' seconds', fontsize = 13)
        sim.step()
    
    else:
        #Add velocity kick

        sim.particles[0].vz = KVZ    # Changing the z velocity of the central particle to __ (in code units)
        sim.particles[0].vx = KVX
        sim.particles[0].vy = KVY      
        sim.step()                   # Move forward one timestep
        coords = np.zeros((sim.N, 6))
        sim.serialize_particle_data(xyzvxvyvz=coords)
        fig, ([ax1, ax2], [ax3, ax4]) = plt.subplots(2,2, figsize = (12,10), dpi = 200)

        # XY graph
        ax1 = plt.subplot(2,2,3)
        vz = coords[:,5]
        scatterxy = plt.scatter(coords[:,0], coords[:,1], c = vz, cmap = 'coolwarm_r', s = 2.5)
        plt.colorbar(scatterxy, label = 'Z-Velocity')
        plt.scatter(coords[:,0][0], coords[:,1][0], marker = 'x', c = 'black', s = 50)
        ax1.set_title("XY")
        ax1.set_xlabel('Distance in cm')

        # YZ graph
        ax2 = plt.subplot(2,2,4)
        vx = coords[:,3]
        scatteryz = plt.scatter(coords[:,2], coords[:,1], c = vx, cmap = 'coolwarm', s = 2.5)
        plt.colorbar(scatteryz, label = 'X-Veloicty')
        plt.scatter(0,0, marker = '+', color = 'k', s = 75)
        plt.scatter(coords[:,2][0], coords[:,1][0], marker = '*', c = 'm', s = 75)
        plt.yticks(color='w')
        ax2.set_title("YZ")
        ax2.set_xlabel('Distance in cm')

        # XZ graph
        ax3 = plt.subplot(2,2,1)
        vy = coords[:,4]
        scatterxz = plt.scatter(coords[:,0], coords[:,2], c = vy, cmap = 'coolwarm', s = 2.5)
        plt.colorbar(scatterxz, label = 'Y-Velocity')
        plt.scatter(0,0, marker = '+', color = 'k', s = 75)
        plt.scatter(coords[:,0][0], coords[:,2][0], marker = '*', c = 'm', s = 75)
        plt.xticks(color='w')
        ax3.set_title("XZ")
        ax3.set_ylabel('Distance in cm')

        # Empty space
        ax4 = plt.subplot(2,2,2)
        plt.scatter(0,0, alpha = 0)
        plt.axis('off')
        plt.tick_params(left = False, right = False , labelleft = False , labelbottom = False, bottom = False)
        ax4.set_title("SMBH Recoil\nInitial Z velocity (cm/s): " + str(KVZ)+"\nInitial X velocity (cm/s): "+ str(KVX)+"\nInitial Y velocity (cm/s): "+ str(KVY)+'\nTimestep: '+ str(f"{sim.t:.3e}")+' seconds', fontsize = 13)
    if i % 500 == 0: # Saves every 100th timestep to an image
        plt.savefig("/Users/karina/Desktop/Python/Capstone/TestingEnvironment/AnimationFolder/image_%s.jpg" % i)
        #Saving each plot to a file with it's own name to be created into a gif https://ezgif.com/maker  
    sim.save_to_file("/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData/archive.bin") 
    plt.close()


#%% -------------------------------Begin Data Extraction------------------------------------------------------


# Initialize Simulationarchive simulation--------------------------------------

sa = rebound.Simulationarchive("/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData/archive.bin")
N_archives = len(sa)


# Initialize empty data arrays-------------------------------------------------

save_times = np.zeros(N_archives)
# 2 dimensional array of size N saves and M particles
particles_x = np.zeros((N_archives, (N_testparticle + 1))) 
particles_y = np.zeros((N_archives, (N_testparticle + 1)))
particles_z = np.zeros((N_archives, (N_testparticle + 1)))
particles_vx = np.zeros((N_archives, (N_testparticle + 1)))
particles_vy = np.zeros((N_archives, (N_testparticle + 1)))
particles_vz = np.zeros((N_archives, (N_testparticle + 1)))


# Now loop through and pull out all of the values of interest------------------

for i, sim in enumerate(sa):
    save_times[i] = sim.t
    for j in range(1, sim.N):
        particles_x[i, j] = sim.particles[j].x
        particles_y[i, j] = sim.particles[j].y
        particles_z[i, j] = sim.particles[j].z
        particles_vx[i, j] = sim.particles[j].vx
        particles_vy[i, j] = sim.particles[j].vy
        particles_vz[i, j] = sim.particles[j].vz 


# Save each individual parameter to its own CSV--------------------------------

x_data = np.concatenate([[save_times], particles_x.T])
np.savetxt('/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData/simXdata.csv',
           x_data, delimiter=', ')

vx_data = np.concatenate([[save_times], particles_vx.T])
np.savetxt('/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData/simVXdata.csv', 
           vx_data, delimiter=', ')

y_data = np.concatenate([[save_times], particles_y.T])
np.savetxt('/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData/simYdata.csv', 
           y_data, delimiter=', ')

vy_data = np.concatenate([[save_times], particles_vy.T])
np.savetxt('/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData/simVYdata.csv', 
           vy_data, delimiter=', ')

z_data = np.concatenate([[save_times], particles_z.T])
np.savetxt('/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData/simZdata.csv', 
           z_data, delimiter=', ')

vz_data = np.concatenate([[save_times], particles_vz.T])
np.savetxt('/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData/simVZdata.csv', 
           vz_data, delimiter=', ')


# Read CSV files into dataframes-----------------------------------------------

x = pd.read_csv('/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData/simXdata.csv')
y = pd.read_csv('/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData/simYdata.csv')
z = pd.read_csv('/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData/simZdata.csv')
vx = pd.read_csv('/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData/simVXdata.csv')
vy = pd.read_csv('/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData/simVYdata.csv')
vz = pd.read_csv('/Users/karina/Desktop/Python/Capstone/TestingEnvironment/RawData/simVZdata.csv')


# Split CSVs into individual timestep CSVs-------------------------------------

var_list = ['X', 'Y', 'Z', 'Vx', 'Vy', 'Vz']     # Column titles
t_step = np.arange(len(sa))                      # Number of files it needs to make - Matches with # of images
df_list = [x, y, z, vx, vy, vz]                  # List of dataframes
t_dict = {}
for i, t in enumerate(t_step):                   # Loop through each column in each parameter csv
    temp_df = pd.DataFrame()
    for j, df in enumerate(df_list):
        var = var_list[j]
        temp_df[var] = df.iloc[0:, i]
    temp_df.to_csv(f'/Users/karina/Desktop/Python/Capstone/TestingEnvironment/TimestepData/t{t}.csv')
    

#%% ----------------------------------------Multi plot---------------------------------------------------------------------


plt.ion() 
np.random.seed(42)            # Random seed for test cases

# Generating Profiles

ObsInc = [0]
LofT = []


for inc in (ObsInc):
    for i,step in enumerate(timesteps):
        sim = sa[timesteps[i]]

        # Read timestep data-------------------------------------------------------------

        xStep = pd.read_csv(f'/Users/karina/Desktop/Python/Capstone/TestingEnvironment/TimestepData/t{timesteps[i]}.csv', usecols = ['X'])
        xStep = xStep['X'].tolist()

        yStep = pd.read_csv(f'/Users/karina/Desktop/Python/Capstone/TestingEnvironment/TimestepData/t{timesteps[i]}.csv', usecols = ['Y'])
        yStep = yStep['Y'].tolist()

        zStep = pd.read_csv(f'/Users/karina/Desktop/Python/Capstone/TestingEnvironment/TimestepData/t{timesteps[i]}.csv', usecols = ['Z'])
        zStep = zStep['Z'].tolist()

        vxStep = pd.read_csv(f'/Users/karina/Desktop/Python/Capstone/TestingEnvironment/TimestepData/t{timesteps[i]}.csv', usecols = ['Vx'])
        vxStep = vxStep['Vx'].tolist()

        vyStep = pd.read_csv(f'/Users/karina/Desktop/Python/Capstone/TestingEnvironment/TimestepData/t{timesteps[i]}.csv', usecols = ['Vy'])
        vyStep = vyStep['Vy'].tolist()

        vzStep = pd.read_csv(f'/Users/karina/Desktop/Python/Capstone/TestingEnvironment/TimestepData/t{timesteps[i]}.csv', usecols = ['Vz'])
        vzStep = vzStep['Vz'].tolist()



        ncd = (N_testparticle*(p+1))/(4*np.pi*(Rd**3)*(1-(Y**-(p+1)))) # 
        Rcld = ((Cf*((alpha+1)/(np.pi*ncd*Rd))*(1/(1-Y**(-(alpha+1))))))**0.5 # Cloud radius at dust sublimation radius
 

        # Cloud radial distance from center, Keplerian velocity, individual cloud radius, and gas density---------------------

        Vkep = []
        dist = []
        nr = []        
        Rcl = []
        r = []
        for i in range(N_testparticle+1):
            r = (np.sqrt(((sim.particles[0].x-sim.particles[i].x)**2)+((sim.particles[0].y-sim.particles[i].y)**2)+((sim.particles[0].z-sim.particles[i].z)**2)))
            dist.append(r)
            with np.errstate(divide='ignore'):
                kep = np.sqrt((6.67259e-8*BHMg)/r)
                Vkep.append(kep)
            Rcloud = Rcld*(r/Rd)**(-s/3)
            nccloud = n0*(r/Rd)**s
            Rcl.append(Rcloud)
            nr.append(nccloud)
        nr.pop(0)
        Rcl.pop(0)   
        Vkep.pop(0)
        dist.remove(0)



        # Ionization state of the cloud------------------------------------------------

        Urt = []
        for i in range(N_testparticle):
            U = (Q/(4*np.pi*((dist[i])**2)*c*nr[i]))
            Urt.append(U)
    
        Urt = np.array(Urt)


        # Radiation vs Matter-bounded cloud--------------------------------------------

        Lcl1 = np.zeros(N_testparticle) 
        Lcl2 = np.zeros(N_testparticle) 
        dc = np.zeros(N_testparticle)
        ds = np.zeros(N_testparticle)

        for i in range(N_testparticle):
            dc[i] = Rcl[i]
            ds[i] = ((c*Urt[i])/(alphaB*nr[i]))


        # Individual cloud luminosity--------------------------------------------------

        for i in range(N_testparticle):
            if ds[i]<dc[i]:
                Lcl1[i] = nr[i]**2*(alphaeff)*h*(nu)*np.pi*(Rcl[i]**2)*ds[i] # For ds<dc Radiation bounded
            else:
                Lcl2[i] = nr[i]**2*(alphaeff)*h*(nu)*np.pi*(Rcl[i]**2)*Rcl[i] # Matter bounded

        print('Total Cloud luminosity for timestep', ':', sum(Lcl1+Lcl2))


        # Belpro output for given timestep---------------------------------------------

        Urt = pd.DataFrame(Urt, columns = ['U'])
        Rcl = pd.DataFrame(Rcl, columns = ['Rcl'])
        nr = pd.DataFrame(nr, columns = ['hden'])
        #Nc = pd.DataFrame(nc, columns = ['Nc'])
        Lcl1 = pd.DataFrame(Lcl1, columns = ['Lcl1'])
        Lcl2 = pd.DataFrame(Lcl2, columns = ['Lcl2'])

        # Line of sight velocity-------------------------------------------------------

        if inc == 0:
            LoS = vzStep

        if inc == 90:
            LoS = vyStep


        def rotate_x(matrix, angle): # Rotation about the x-axis by inclination of observer

            rotation_matrix = np.array([
            [1, 0, 0],
            [0, np.cos(angle), -np.sin(angle)],
            [0, np.sin(angle), np.cos(angle)]
        ])

            return np.dot(rotation_matrix, matrix)

        theta = inc*(np.pi/180)

        if 0 < inc < 90:
            angle = theta
            rotatedLoS = []
            coordinates = []
            rotatedKick = []
            for i in range(N_testparticle+1): # Particle rotation
                posmatrix = np.array([sim.particles[i].x, sim.particles[i].y, sim.particles[i].z])
                velmatrix = np.array([sim.particles[i].vx, sim.particles[i].vy, sim.particles[i].vz])
                rotated_position = rotate_x(posmatrix, angle)
                rotated_velocity = rotate_x(velmatrix,angle)
                rotatedLoS.append(rotated_velocity)
                coordinates.append(rotated_position)
            for i in range(1): # Kick rotation
                kickmatrix = np.array([KVX,KVY,KVZ])
                rotated_kick = rotate_x(kickmatrix,angle)
            LoS = [ x[2] for x in rotatedLoS]
            LoS = np.array(LoS) 



        # Determine bin range----------------------------------------------------------

        numbin = 10

        # Total Luminosity in each bin-------------------------------------------------

        zeros = pd.DataFrame([0])
        Lvals = pd.concat([Lcl1,Lcl2], axis = 1)
        Lval = Lvals['Lcl1'] + Lvals['Lcl2']
        Lval = pd.concat([zeros, Lval])

        LoS = np.array(LoS)
        Lval = np.ravel(Lval)

        Lsum, sortedV, Bin = stats.binned_statistic_dd(LoS, Lval, statistic='sum', bins = numbin)    

        sortedV = np.array(sortedV)
        sortedV = np.swapaxes(sortedV,0,1)
        sortedV = sortedV[:-1]

        g = Gaussian1DKernel(stddev=1)
        Lsum = convolve(Lsum,g)

        # Plot-------------------------------------------------------------------------

        fig, ax = plt.subplots(figsize=(15, 8), dpi = 200)

        vkick = np.sqrt(KVZ*KVZ+KVY*KVY+KVX*KVX)
        angle = np.arctan((np.sqrt(KVX*KVX+KVY*KVY))/KVZ)
        angle = np.round(angle*57.2958)

        
        ax.plot(sortedV,Lsum)

        # Detailed Title
        #ax.set_title('Simulated Spectra\nTime Passed: '+str(f"{sim.t:.3e}"+' seconds'+ " - Observer Inclination: "+str(inc)+"\nKick Velocity: "+ str(f"{vkick:.0e}")+" cm/s") + " - Kick Angle: "+str(angle)+" degrees - BH Mass: "+str(f"{BHM:.0e}"), fontsize = 20)
        
        # Simplified Title
        ax.set_title('Simulated Spectra\nTime Passed: '+str(f"{sim.t:.3e}")+' seconds', fontsize = 20)
        
        ax.set_ylabel('Total Luminosity (ergs/s)', fontsize = 15)
        ax.set_xlabel('Line of Sight Velocity (cm/s) - '+ str(numbin)+ ' Velocity Bins ', fontsize = 15)

        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)

        ax.axvline(x=0, color = 'red', linestyle = '--', alpha = 0.5)
        filename = (f"profile_M{BHM:.1e}_V{f"{vkick:.0e}"}_A{angle}_"f"I{inc}_T{step}") 
        #plt.savefig(f'/Users/karina/Desktop/Python/Capstone/TestingEnvironment/AnimationFolder/{filename}.jpg', dpi=300, bbox_inches='tight') 

        # Luminosity over time
        Lt = Lcl1.sum().values[0] + Lcl2.sum().values[0]
        LofT.append((sim.t, Lt))


# Percentage of particles with keplarian velocity below kick i.e. the ones that will be left behind


escaped = []
for i in Vkep:
    if i < vkick:
        escaped.append(i)

fraction = (len(escaped)/N_testparticle)*100    
print("Fraction: " + str(fraction))

# %%
# Percent difference over time
